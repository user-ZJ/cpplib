异常处理
================================

C++ 异常处理涉及到三个关键字：**try、catch、throw**。

- **throw:** 当问题出现时，程序会抛出一个异常。这是通过使用 **throw** 关键字来完成的。
- **catch:** 在您想要处理问题的地方，通过异常处理程序捕获异常。**catch** 关键字用于捕获异常。
- **try:** **try** 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。

.. code-block:: cpp

  #include <iostream>
  using namespace std;
  
  double division(int a, int b)
  {
    if( b == 0 )
    {
        throw "Division by zero condition!";
    }
    return (a/b);
  }
  
  int main ()
  {
    int x = 50;
    int y = 0;
    double z = 0;
  
    try {
      z = division(x, y);
      cout << z << endl;
    }catch (const char* msg) {
      cerr << msg << endl;
    }
    return 0;
  }


**异常类型** 可以是字符串（就像这个例子中那样）或其他C++类型；通常为**类**类型


::

  执行throw语句类似于执行返回语句，因为它也将**终止函数的执行**；
  但throw不是将控制权返回给调用程序，而是导致程序沿函数调用序列后退，直到找到包含try块的函数。

.. code-block:: cpp

  try{
      
  }catch(...){ //捕获任何异常
      
  }


将对象用作异常类型
---------------------------

引发异常的函数将传递一个对象。这样做的重要优点之一是，可以使用不同的异常类型来区分不同的函数在不同情况下引发的异常。
另外，对象可以携带信息，程序员可以根据这些信息来确定引发异常的原因。同时，catch块可以根据这些信息来决定采取什么样的措施



**注意：** 通常catch中使用类的引用。引用有一个重要特征：基类引用可以执行派生类对象。
假设有一组通过继承关联起来的异常类型，则在异常规范中只需列出一个基类引用，它将与任何派生类对象匹配。

自定义异常类
--------------------

.. code-block:: cpp

  #include <iostream>
  using namespace std;

  class bad_div0{
  private:
    int a;
    int b;
  public:
    bad_div0(int v1,int v2):a(v1),b(v2){}
    const char *message(){
        return "div 0 error:"+tostring(a)+"/"+tostring(b);
    }
  };
  
  double division(int a, int b)
  {
    if( b == 0 )
    {
        throw bad_div0(a,b);
    }
    return (a/b);
  }
  
  int main ()
  {
    int x = 50;
    int y = 0;
    double z = 0;
  
    try {
      z = division(x, y);
      cout << z << endl;
    }catch (bad_div0 &bd) {
      cerr << bd.message() << endl;
    }
  
    return 0;
  }

C++预定于异常类型
--------------------------------

C++定义了exception类，可以把它用作其他异常类的基类。exception类中有一个名为what( )的虚拟成员函数，可以在从exception派生而来的类中重新定义它

exception继承关系
```````````````````````
+-----------+---------------+------------------+
| base      | v1            | v2               |
+===========+===============+==================+
| exception | logic_error   | domain_error     |
|           |               +------------------+
|           |               | invalid_argument |
|           |               +------------------+
|           |               | length_error     |
|           |               +------------------+
|           |               | out_of_bounds    |
+-----------+---------------+------------------+
|           | runtime_error | range_error      |
|           |               +------------------+
|           |               | overflow_error   |
|           |               +------------------+
|           |               | underflow_error  |
+-----------+---------------+------------------+
|           | bad_alloc     |                  |
|           +---------------+------------------+
|           | bad_cast      |                  |
|           +---------------+------------------+
|           | bad_typeid    |                  |
|           +---------------+------------------+
|           | bad_exception |                  |
+-----------+---------------+------------------+



+------------------------+-------------------------------------------------------------------------------+
|          异常          |                                     描述                                      |
+========================+===============================================================================+
| **std::exception**     | 该异常是所有标准 C++ 异常的父类。                                             |
+------------------------+-------------------------------------------------------------------------------+
| std::bad_alloc         | 该异常可以通过 **new** 抛出。                                                 |
+------------------------+-------------------------------------------------------------------------------+
| std::bad_cast          | 该异常可以通过 **dynamic_cast** 抛出。                                        |
+------------------------+-------------------------------------------------------------------------------+
| std::bad_exception     | 这在处理 C++ 程序中无法预期的异常时非常有用。                                 |
+------------------------+-------------------------------------------------------------------------------+
| std::bad_typeid        | 该异常可以通过 **typeid** 抛出。                                              |
+------------------------+-------------------------------------------------------------------------------+
| **std::logic_error**   | 理论上可以通过读取代码来检测到的异常。                                        |
+------------------------+-------------------------------------------------------------------------------+
| std::domain_error      | 当使用了一个无效的数学域时，会抛出该异常。                                    |
+------------------------+-------------------------------------------------------------------------------+
| std::invalid_argument  | 当使用了无效的参数时，会抛出该异常。                                          |
+------------------------+-------------------------------------------------------------------------------+
| std::length_error      | 当创建了太长的 std::string 时，会抛出该异常。                                 |
+------------------------+-------------------------------------------------------------------------------+
| std::out_of_range      | 该异常可以通过方法抛出，例如 `std::vector` 和 `std::bitset<>::operator[]()`。 |
+------------------------+-------------------------------------------------------------------------------+
| **std::runtime_error** | 理论上不可以通过读取代码来检测到的异常。                                      |
+------------------------+-------------------------------------------------------------------------------+
| std::overflow_error    | 当发生数学上溢时，会抛出该异常。                                              |
+------------------------+-------------------------------------------------------------------------------+
| std::range_error       | 当尝试存储超出范围的值时，会抛出该异常。                                      |
+------------------------+-------------------------------------------------------------------------------+
| std::underflow_error   | 当发生数学下溢时，会抛出该异常。                                              |
+------------------------+-------------------------------------------------------------------------------+

继承exception异常类型
-----------------------------

.. code-block:: cpp

  #include <iostream>
  #include <exception>
  using namespace std;
  
  struct MyException : public exception
  {
    const char * what () const throw ()
    {
      return "C++ Exception";
    }
  };
  
  int main()
  {
    try
    {
      throw MyException();
    }
    catch(MyException& e)
    {
      std::cout << "MyException caught" << std::endl;
      std::cout << e.what() << std::endl;
    }
    catch(std::exception& e)
    {
      //其他的错误
    }
  }


