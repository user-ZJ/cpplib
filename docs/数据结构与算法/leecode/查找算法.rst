查找算法
================

二分查找
----------------

查找值
```````````````
.. code-block:: cpp

    int binary_search(vector<int> nums,int target){
        if(nums.size()==0) return -1;
        int left=0,right=nums.size()-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                left = mid +1;
            }else{
                right = mid - 1;
            }
        }
        return -1;
    }


查找左边界
`````````````
.. code-block:: cpp

    int left_bound(vector<int> nums,int target){
        if(nums.size()==0) return -1;
        int left=0,right=nums.size()-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target){
                right = mid -1;
            }else if(nums[mid]>target){
                left = mid +1;
            }else{
                right = mid - 1;
            }
        }
        if(left>=nums.size || nums[left]!=target)
            return -1;
        return left;
    }


查找右边界
`````````````
.. code-block:: cpp

    int right_bound(vector<int> nums,int target){
        if(nums.size()==0) return -1;
        int left=0,right=nums.size()-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target){
                left = mid +1;
            }else if(nums[mid]>target){
                left = mid +1;
            }else{
                right = mid - 1;
            }
        }
        if(right<0 || nums[right]!=target)
            return -1;
        return right;
    }


旋转数组最小值(二分)
`````````````````````````

::

    把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。
    输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
    NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。


::

    这里我们把target 看作是右端点，来进行分析，那就要分析以下三种情况，看是否可以达到上述的目标。

    情况1，arr[mid] > target：4 5 6 1 2 3
    arr[mid] 为 6， target为右端点 3， arr[mid] > target, 说明[first ... mid] 都是 >= target 的，因为原始数组是非递减，所以可以确定答案为 [mid+1...last]区间,所以 first = mid + 1
    情况2，arr[mid] < target:5 6 1 2 3 4
    arr[mid] 为 1， target为右端点 4， arr[mid] < target, 说明答案肯定不在[mid+1...last]，但是arr[mid] 有可能是答案,所以答案在[first, mid]区间，所以last = mid;
    情况3，arr[mid] == target:
    如果是 1 0 1 1 1， arr[mid] = target = 1, 显然答案在左边
    如果是 1 1 1 0 1, arr[mid] = target = 1, 显然答案在右边
    所以这种情况，不能确定答案在左边还是右边，那么就让last = last - 1;慢慢缩少区间，同时也不会错过答案。


.. code-block:: cpp

    int minNumberInRotateArray(vector<int> rotateArray) {
            if(rotateArray.size()==0) return 0;
            int first=0,last=rotateArray.size()-1;
            while(first<last){
                if(rotateArray[first]<rotateArray[last]){  //未进行旋转
                    return rotateArray[first];
                }
                int mid = (first+last)/2;
                if(rotateArray[mid]>rotateArray[last]){  //最小元素位于mid右侧
                    first = mid +1;
                }else if(rotateArray[mid]<rotateArray[last]){  //mid可能是最小的元素
                    last = mid;
                }else{
                    --last;
                }
            }
            return rotateArray[first];
    }


旋转数组查找(二分)
`````````````````````````````

::

    给出一个转动过的有序数组，你事先不知道该数组转动了多少
    (例如,0 1 2 4 5 6 7可能变为4 5 6 7 0 1 2).
    在数组中搜索给出的目标值，如果能在数组中找到，返回它的索引，否则返回-1。
    假设数组中不存在重复项。

::

    对旋转数组进行均等划分后，总有一边是有序的
    我们定位到有序的一边后，对比target与有序子数组的左右边界，就可以作出搜索左侧还是右侧的决策。


.. code-block:: cpp

    int search(int* A, int n, int target) {
            // write code here
            int left = 0, right = n - 1;
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (A[mid] == target) return mid;
                if (A[mid] >= A[left]) {
                    // 左侧有序(含A[mid])
                    if (A[mid] > target && A[left] <= target)
                        right = mid - 1;
                    else
                        left = mid + 1;
                } else {
                    // 右侧有序(含A[mid])
                    if (A[mid] < target && A[right] >= target)
                        left = mid + 1;
                    else
                        right = mid - 1;
                }
            }
            return -1;
    }
