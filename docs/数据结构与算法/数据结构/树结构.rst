树结构
================

树结构通常用来存储逻辑关系为 "一对多" 的数据。例如：

.. image:: /images/tree1.PNG
    :align: center

有关树的术语
---------------

1. **节点**:
   树存储结构中也将存储的各个元素称为 "结点"。还可以进一步分为父节点，子节点，兄弟节点，根节点，叶子节点
2. **子树**:
   通常，我们将一棵树中几个结点构成的“小树”称为这棵树的“子树”。单个结点也可以看作是一棵树，该结点即为根结点。
3. **节点的度**:
   节点拥有子节点的个数。比较一棵树中所有结点的度，最大的度即为整棵树的度。
4. **节点的层次**:
   从一棵树的树根开始，树根所在层为第一层，根的孩子结点所在的层为第二层，依次类推。树中结点层次的最大值，称为这棵树的深度或者高度。
5. **有序树和无序树**:
   如果一棵树中，各个结点左子树和右子树的位置不能交换，那么这棵树就称为有序树。
   反之，如果树中结点的左、右子树可以互换，那么这棵树就是一棵无序树。
6. **森林**:
   由 m（m >= 0）个互不相交的树组成的集合就称为森林。
7. **空树**:
   空树指的是没有任何结点的树，连根结点都没有。
   



二叉树
--------------
满足以下两个条件的树就是二叉树：

1. 本身是有序树；
2. 树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；

二叉树具有以下几个性质：

1. 二叉树中，第i层最多有 :math:`2^{i-1}` 个结点。
2. 如果二叉树的深度为 K，那么此二叉树最多有 :math:`2^K-1` 个结点。
3. 二叉树中，终端结点数（叶子结点数）为 n0，度为 2 的结点数为 n2，则 n0=n2+1。

满二叉树
^^^^^^^^^^^^^^^^^
如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。

满二叉树除了满足普通二叉树的性质，还具有以下性质：

1. 满二叉树中第 i 层的节点数为 :math:`2^{i-1}` 个。
2. 深度为 k 的满二叉树必有 :math:`2^k-1` 个节点 ，叶子数为 :math:`2^{k-1}` 。
3. 满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。
4. 具有 n 个节点的满二叉树的深度为 :math:`log_2(n+1)` 。

完全二叉树
^^^^^^^^^^^^^^^
如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。

完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质:

1. n 个结点的完全二叉树的深度为 :math:`⌊log_2n⌋+1`。

对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图 3a)），对于任意一个结点 i ，完全二叉树还有以下几个结论成立：

1. 当 i>1 时，父亲结点为结点 [i/2] 。（i=1 时，表示的是根结点，无父亲结点）
2. 如果 2*i>n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2*i 。
3. 如果 2*i+1>n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2*i+1 。

树的遍历方式
^^^^^^^^^^^^^^^^^^
1. 先序遍历
2. 中序遍历
3. 后续遍历
4. 深度优先遍历
5. 广度优先遍历


二叉搜索树
----------------




平衡二叉树(AVL树)
--------------------
自平衡二叉查找树,由前苏联的数学家 Adelse-Velskil 和 Landis 在 1962 年提出的高度平衡的二叉树，根据科学家的英文名也称为 AVL 树。它具有如下几个性质：

1. 可以是空树。
2. 假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。

查找、插入和删除在平均和最坏情况下的时间复杂度都是 :math:`O(logn)` 

**平衡因子**:某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子（BF,Balance Factor），
平衡二叉树中不存在平衡因子大于 1 的节点。在一棵平衡二叉树中，节点的平衡因子只能取 0 、1 或者 -1 ，
分别对应着左右子树等高，左子树比较高，右子树比较高。

2-3树
------------
一个节点可以有2-3个孩子。这样可以减少平衡二叉树的旋转次数。


平衡树(B树/B-树)
--------------------------
平衡树,B树，全名BalanceTree.这种结构主要用来做查找。
每一个节点可以保存两个数据或一个数据，一个节点最多可以有3个指针。节约旋转时间


B+树
--------------
广泛引用于各种硬盘和数据库中。

B+树的所有数据只存在叶子节点中，非叶子节点只用来描述结构，不保存数据。

并且叶子节点这一层每一块之间有指针连接



红黑树
-------------------

参考
-------------
http://data.biancheng.net/tree/

https://zhuanlan.zhihu.com/p/273829162