稀疏矩阵
===================

SpMM:sparsedense matrix multiplication

COO(coordinate) Format
----------------------------
仅存储非零元素以及每个非零元素的坐标。

使用3个数组进行存储,3个数组等长:

* values: 实数或复数数据，包括矩阵中的非零元素， 顺序任意。
* rows: 数据所处的行。
* columns: 数据所处的列.

示例：

::

    矩阵：
    [
        [1,7,0,0],
        [0,2,8,0],
        [5,0,3,9],
        [0,6,0,4]
    ]

    可表示为：
    values:         [1,7,2,8,5,3,9,6,4]
    rows indices:   [0,0,1,1,2,2,2,3,3]
    columns indices:[0,1,1,2,0,2,3,1,3]

Compressed sparse row (CSR, CRS or Yale format) Format
----------------------------------------------------------
**行压缩格式**

使用三个（一维）数组(Values, COL_INDEX, ROW_INDEX)以行形式存储稀疏m × n矩阵M.

* Values:存储非零值，长度为m
* COL_INDEX:存储Values中值得列索引，长度为m
* ROW_INDEX:长度为m + 1,每一行数据在Values数组中的起始索引和结束索引,如：Values中的集合[ROW_INDEX[i],ROW_INDEX[i+1])表示第i行的数据

::

    矩阵：
    [
        [1,7,0,0],
        [0,2,8,0],
        [5,0,3,9],
        [0,6,0,4]
    ]

    可表示为：
    values:         [1,7,2,8,5,3,9,6,4]
    COL_INDEX:      [0,1,1,2,0,2,3,1,3]
    ROW_INDEX:      [0,2,4,7,9]

Compressed sparse column (CSC or CCS) format
-----------------------------------------------
**列压缩格式**

和行压缩格式类似，使用三个（一维）数组(Values, COL_INDEX, ROW_INDEX)以行形式存储稀疏m × n矩阵M.

* Values:存储非零值（从上到下，然后从左到右），长度为m
* ROW_INDEX:存储Values中值得行索引，长度为m
* COL_INDEX:长度为m+1,每一列数据在Values数组中的起始索引和结束索引,如：Values中的集合[COL_INDEX[i],COL_INDEX[i+1])表示第i列的数据


::

    矩阵：
    [
        [1,7,0,0],
        [0,2,8,0],
        [5,0,3,9],
        [0,6,0,4]
    ]

    可表示为：
    values:         [1,5,7,2,6,8,3,9,4]
    COL_INDEX:      [0,2,5,7,9]
    ROW_INDEX:      [0,2,0,1,3,1,2,2,3]


Block compressed sparse row (BCSR) Format
-------------------------------------------------
BCSR是对CSR的一般化和改进，它和CSR的区别在于把原矩阵分成了大小相同的block，block中的空元素则用0填上，
于是每一个block都是稠密的，所以val数组会变大一些（需要填充一些0），但是索引却简化了。


稀疏矩阵加速库
------------------
`OSKI <https://bebop.cs.berkeley.edu/oski/>`_

FastSpMM: An Efﬁcient Libraryfor Sparse Matrix Matrix Producton GPUs

`librsb <http://librsb.sourceforge.net/>`_ : A shared memory parallel sparse matrix computations library for the Recursive Sparse Blocks format

librsb在大型矩阵上速度很快；这些是内存占用超过内存缓存的矩阵。如今，这个边界大约是几百万个非零值。如果您的矩阵小于这个值，您可能会发现librsb比一个好的 CSR/CSC 串行实现要慢；但如果比这大，也快得多。

Eigen支持Sparse matrix：https://eigen.tuxfamily.org/dox/group__TutorialSparse.html

onnxruntime不支持稀疏矩阵运算：
https://github.com/microsoft/onnxruntime/issues/2121


SparseDNN: Fast Sparse Deep Learning Inference on CPUs  https://arxiv.org/abs/2101.07948






参考
--------------
https://zhuanlan.zhihu.com/p/342711915
